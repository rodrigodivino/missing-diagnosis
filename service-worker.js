!function(){"use strict";const s=["client/client.2a929d2c.js","client/index.404f3a73.js","client/Tutorial.95344ea4.js","client/index.6b1eccfd.js","client/questions.69fda8b5.js","client/DirectQuestionComparison.3b09bc1d.js","client/index.067d2f90.js","client/HypothesisConfirmation.de76ddce.js","client/HypothesisComparison.9c235f9e.js","client/SUSQuestionnaire.683596c1.js","client/about.5ff4235f.js","client/index.4d286ea3.js","client/index.b014f945.js","client/[slug].10dc19cb.js","client/client.b5799b2a.js","client/DirectQuestionComparison.e8e08e1e.js","client/index.f7d9494a.js","client/json-url-single.6483d160.js"].concat(["service-worker-index.html","favicon.png","global.css","great-success.png","logo-192.png","manifest.json","tests/q1/Q1-i.n.svg","tests/q1/Q1-i.p.svg","tests/q1/Q1-ii.n.svg","tests/q1/Q1-ii.p.svg","tests/q2/Q2-i.n.svg","tests/q2/Q2-i.p.svg","tests/q2/Q2-ii.n.svg","tests/q2/Q2-ii.p.svg","tests/q3/Q3-i.n.svg","tests/q3/Q3-i.p.svg","tests/q3/Q3-ii.n.svg","tests/q3/Q3-ii.p.svg","tests/q4/Q4-i.p.svg","tests/q4/Q4-iA.n.svg","tests/q4/Q4-iB.n.svg","tests/q4/Q4-ii.p.svg","tests/q4/Q4-iiA.n.svg","tests/q4/Q4-iiB.n.svg","tests/q5/Q5-i.n.svg","tests/q5/Q5-i.p.svg","tests/q5/Q5-ii.n.svg","tests/q5/Q5-ii.p.svg","tests/q6/Q6-i.p.svg","tests/q6/Q6-iA.n.svg","tests/q6/Q6-iB.n.svg","tests/q6/Q6-iC.n.svg","tests/q6/Q6-iD.n.svg","tests/q6/Q6-ii.p.svg","tests/q6/Q6-iiA.n.svg","tests/q6/Q6-iiB.n.svg","tests/q6/Q6-iiC.n.svg","tests/q6/Q6-iiD.n.svg","tests/q7/Q7-i.n.svg","tests/q7/Q7-i.p.svg","tests/q7/Q7-ii.n.svg","tests/q7/Q7-ii.p.svg"]),t=new Set(s);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1622990167250").then(t=>t.addAll(s)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",s=>{s.waitUntil(caches.keys().then(async s=>{for(const t of s)"cache1622990167250"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",s=>{if("GET"!==s.request.method||s.request.headers.has("range"))return;const e=new URL(s.request.url);e.protocol.startsWith("http")&&(e.hostname===self.location.hostname&&e.port!==self.location.port||(e.host===self.location.host&&t.has(e.pathname)?s.respondWith(caches.match(s.request)):"only-if-cached"!==s.request.cache&&s.respondWith(caches.open("offline1622990167250").then(async t=>{try{const e=await fetch(s.request);return t.put(s.request,e.clone()),e}catch(e){const i=await t.match(s.request);if(i)return i;throw e}}))))})}();
