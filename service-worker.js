!function(){"use strict";const s=["client/client.f590f457.js","client/index.404f3a73.js","client/Tutorial.6b8e5a43.js","client/index.0c431676.js","client/questions.94c555a1.js","client/DirectQuestionComparison.de31ac80.js","client/index.067d2f90.js","client/HypothesisConfirmation.cac42cbd.js","client/HypothesisComparison.bb2b6dfe.js","client/SUSQuestionnaire.fc8fdca0.js","client/about.0203a7bb.js","client/index.b3cee7a1.js","client/index.6b51b589.js","client/[slug].0591e4aa.js","client/client.3eee9f29.js","client/DirectQuestionComparison.d2b2579b.js","client/index.ec4b8be0.js","client/json-url-single.6483d160.js"].concat(["service-worker-index.html","favicon.png","global.css","great-success.png","logo-192.png","manifest.json","tests/q1/Q1-i.n.svg","tests/q1/Q1-i.p.svg","tests/q1/Q1-ii.n.svg","tests/q1/Q1-ii.p.svg","tests/q2/Q2-i.n.svg","tests/q2/Q2-i.p.svg","tests/q2/Q2-ii.n.svg","tests/q2/Q2-ii.p.svg","tests/q3/Q3-i.n.svg","tests/q3/Q3-i.p.svg","tests/q3/Q3-ii.n.svg","tests/q3/Q3-ii.p.svg","tests/q4/Q4-i.p.svg","tests/q4/Q4-iA.n.svg","tests/q4/Q4-iB.n.svg","tests/q4/Q4-ii.p.svg","tests/q4/Q4-iiA.n.svg","tests/q4/Q4-iiB.n.svg","tests/q5/Q5-i.n.svg","tests/q5/Q5-i.p.svg","tests/q5/Q5-ii.n.svg","tests/q5/Q5-ii.p.svg","tests/q6/Q6-i.p.svg","tests/q6/Q6-iA.n.svg","tests/q6/Q6-iB.n.svg","tests/q6/Q6-iC.n.svg","tests/q6/Q6-iD.n.svg","tests/q6/Q6-ii.p.svg","tests/q6/Q6-iiA.n.svg","tests/q6/Q6-iiB.n.svg","tests/q6/Q6-iiC.n.svg","tests/q6/Q6-iiD.n.svg","tests/q6/Q6-iiMAIN.n.svg","tests/q6/Q6-iMAIN.n.svg","tests/q7/Q7-i.n.svg","tests/q7/Q7-i.p.svg","tests/q7/Q7-ii.n.svg","tests/q7/Q7-ii.p.svg"]),t=new Set(s);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1623783177184").then(t=>t.addAll(s)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",s=>{s.waitUntil(caches.keys().then(async s=>{for(const t of s)"cache1623783177184"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",s=>{if("GET"!==s.request.method||s.request.headers.has("range"))return;const e=new URL(s.request.url);e.protocol.startsWith("http")&&(e.hostname===self.location.hostname&&e.port!==self.location.port||(e.host===self.location.host&&t.has(e.pathname)?s.respondWith(caches.match(s.request)):"only-if-cached"!==s.request.cache&&s.respondWith(caches.open("offline1623783177184").then(async t=>{try{const e=await fetch(s.request);return t.put(s.request,e.clone()),e}catch(e){const i=await t.match(s.request);if(i)return i;throw e}}))))})}();
